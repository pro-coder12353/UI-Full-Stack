we can use display property to make elements block,inline or inline-block or table or none

but we have respnsive layout options like flexbox

flex is used to arrange child items in single direction flexibly

To do this, we should give display flex to parent

display property is used to make elements appear in different ways. Ususally there are two types of elements.
1. display:block ---> theses elements don't allow next elements to be side by side them.
2.display: inline ---> these elements allows next elements to adjust next to them.
Also inline elements cannot have height and width.
3. display:inline-block: incase we want elements  side by side and also height , width for them, we can give them property siplay inline block

4. display: table--> it arranges given elements as tables. so inside that every elemnt is considered as tr

5. display: none ---> it removes the element from DOM. its place is allocated to next element.

Flexbox, or the Flexible Box Layout, is a layout model in  that allows you to design a flexible and responsive layout structure for your web applications. Flexbox consists of several properties that control the layout and alignment of items within a flex container. Here's a detailed explanation of each property:

display: This property is used to define a flex container. It can take the following values:
flex: Establishes a flex container.
inline-flex: Establishes an inline flex container.


.container {
  display: flex;
}
flex-direction: This property determines the direction in which flex items are placed in the flex container. It can take the following values:
row: Items are placed in the same direction as the text flow.
row-reverse: Items are placed in the opposite direction of the text flow.
column: Items are placed from top to bottom.
column-reverse: Items are placed from bottom to top.


.container {
  flex-direction: row;
}
flex-wrap: This property defines whether flex items are forced onto a single line or can wrap onto multiple lines. It can take the following values:
nowrap: Items are forced onto a single line.
wrap: Items wrap onto multiple lines if needed.
wrap-reverse: Items wrap onto multiple lines in the opposite direction.


.container {
  flex-wrap: wrap;
}
flex-flow: This is a shorthand property for setting flex-direction and flex-wrap in a single declaration.


.container {
  flex-flow: row wrap;
}
justify-content: This property aligns flex items along the main axis of the flex container. It can take the following values:
flex-start: Items are aligned to the start of the container.
flex-end: Items are aligned to the end of the container.
center: Items are centered along the main axis.
space-between: Items are evenly distributed with the first item at the start and the last item at the end.
space-around: Items are evenly distributed with equal space around them.


.container {
  justify-content: center;
}
align-items: This property aligns flex items along the cross axis of the flex container. It can take the following values:
stretch: Items are stretched to fill the container.
flex-start: Items are aligned to the start of the container.
flex-end: Items are aligned to the end of the container.
center: Items are centered along the cross axis.
baseline: Items are aligned such that their baselines align.


.container {
  align-items: center;
}
align-content: This property aligns a flex container's lines within the flex container when there is extra space in the cross-axis. It can take the following values:
stretch: Lines are stretched to fill the container.
flex-start: Lines are packed to the start of the container.
flex-end: Lines are packed to the end of the container.
center: Lines are centered in the container.
space-between: Lines are evenly distributed with the first line at the start and the last line at the end.
space-around: Lines are evenly distributed with equal space around them.


.container {
  align-content: center;
}
These properties can be applied to the parent element (the flex container) to control the layout and alignment of its child elements (flex items) within a flexbox layout. Flexbox provides a powerful and flexible way to create complex and responsive layouts in .
The flex property in  is a shorthand property for setting the flex-grow, flex-shrink, and flex-basis properties of a flex item. It is used in flexbox layouts to control how a flex item grows, shrinks, and its initial size. The flex property can be applied to a flex container's children (flex items).

Here's a breakdown of each part of the flex property:

flex-grow: This specifies how much a flex item will grow relative to the other flex items in the flex container. It takes a unitless number as a value, which represents the flex grow factor. A higher number means the item will grow more compared to other items. If all items have flex-grow set to 1, they will all grow equally to fill the available space. If one item has flex-grow set to 2 while others are 1, the item with 2 will grow twice as much as the others.


.item {
  flex-grow: 1; /* default value */
}

.item2 {
  flex-grow: 2;
}
flex-shrink: This specifies how much a flex item will shrink relative to the other flex items in the flex container when there isn't enough space. It also takes a unitless number as a value. A higher number means the item will shrink more compared to other items. If all items have flex-shrink set to 1, they will all shrink equally to fit the available space. If one item has flex-shrink set to 0 while others are 1, it will not shrink when space is limited.


.item {
  flex-shrink: 1; /* default value */
}

.item2 {
  flex-shrink: 0;
}
flex-basis: This specifies the initial size of a flex item before the remaining space is distributed. It can be set to a length (e.g., px, em, rem) or a percentage. It can also be set to auto, which means the item will be sized based on its content.


.item {
  flex-basis: auto; /* default value */
}

.item2 {
  flex-basis: 100px;
}
Putting it all together, here's how you can use the flex property with its individual properties:



.item {
  flex: <flex-grow> <flex-shrink> <flex-basis>;
}

.item2 {
  flex: 2 1 100px; /* Example usage */
}
In this example, item2 will grow twice as much as other items, shrink equally, and have an initial size of 100px. The flex property is a convenient way to set all three flex properties in a single line, making the code more concise and easier to manage in flexbox layouts.